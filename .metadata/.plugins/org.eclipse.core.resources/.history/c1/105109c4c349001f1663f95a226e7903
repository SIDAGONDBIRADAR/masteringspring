package com.eazybytes.eazyschool.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.eazybytes.eazyschool.model.Courses;
import com.eazybytes.eazyschool.model.EazyClass;
import com.eazybytes.eazyschool.model.Person;
import com.eazybytes.eazyschool.repository.CoursesRepository;
import com.eazybytes.eazyschool.repository.EazyClassRepository;
import com.eazybytes.eazyschool.repository.PersonRepository;

import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/admin")
public class AdminController {

	private static final String Courses = null;

	@Autowired
	CoursesRepository coursesRepository;

	@Autowired
	EazyClassRepository eazyClassRepository;

	@Autowired
	PersonRepository personRepository;

	@RequestMapping("/displayClasses")
	public ModelAndView displayClasses(Model model) {
		List<EazyClass> eazyClasses = eazyClassRepository.findAll();
		ModelAndView modelAndView = new ModelAndView("classes.html");
		modelAndView.addObject("eazyClasses", eazyClasses);
		modelAndView.addObject("eazyClass", new EazyClass());
		return modelAndView;
	}

	@RequestMapping(value = "/addNewClass", method = RequestMethod.POST)
	public ModelAndView addClass(@Valid @ModelAttribute("eazyClass") EazyClass eazyClass) {
		eazyClassRepository.save(eazyClass);
		ModelAndView modelAndView = new ModelAndView("redirect:/admin/displayClasses");
		return modelAndView;
	}

	@RequestMapping("/deleteClass")
	public ModelAndView deleteClass(Model model, @RequestParam("id") Integer id) {
		EazyClass eazyClass = eazyClassRepository.findById(id).get();
		for (Person person : eazyClass.getPersons()) {
			person.setEazyClass(null);
			personRepository.save(person);
		}
		eazyClassRepository.deleteById(id);
		ModelAndView modelAndView = new ModelAndView("redirect:/admin/displayClasses");
		return modelAndView;
	}

	@RequestMapping("/displayStudents")
	public ModelAndView displayStudents(Model model, @RequestParam int classId, HttpSession session,
			@RequestParam(value = "error", required = false) String error) {
		String errorMessage = null;
		ModelAndView modelAndView = new ModelAndView("students.html");
		EazyClass eazyClass = eazyClassRepository.findById(classId).get();
		modelAndView.addObject("eazyClass", eazyClass);
		modelAndView.addObject("person", new Person());
		session.setAttribute("eazyClass", eazyClass);
		if (error != null) {
			errorMessage = "Invalid Email Address";
			modelAndView.addObject("errorMessage", errorMessage);
		}
		return modelAndView;
	}

	@RequestMapping(value = "/addStudent", method = RequestMethod.POST)
	public ModelAndView addStudent(Model model, HttpSession session, @ModelAttribute("person") Person person) {
		ModelAndView modelAndView = new ModelAndView();
		EazyClass eazyClass = (EazyClass) session.getAttribute("eazyClass");
		Person dbPerson = personRepository.findByEmail(person.getEmail());
		if (dbPerson == null || !(dbPerson.getPersonId() > 0)) {
			modelAndView
					.setViewName("redirect:/admin/displayStudents?classId=" + eazyClass.getClassId() + "&error=true");
			return modelAndView;
		}
		dbPerson.setEazyClass(eazyClass);
		personRepository.save(dbPerson);
		eazyClass.getPersons().add(dbPerson);
		eazyClassRepository.save(eazyClass);
		modelAndView.setViewName("redirect:/admin/displayStudents?classId=" + eazyClass.getClassId());
		return modelAndView;
	}

	@RequestMapping("/deleteStudent")
	public ModelAndView deleteStudent(Model model, HttpSession session, @RequestParam("personId") Integer personId) {
		EazyClass eazyClass = (EazyClass) session.getAttribute("eazyClass");
		Person person = personRepository.findById(personId).get();
		person.setEazyClass(null);
		eazyClass.getPersons().remove(person);
		EazyClass savedEazyClass = eazyClassRepository.save(eazyClass);
		session.setAttribute("eazyClass", savedEazyClass);
		ModelAndView modelAndView = new ModelAndView(
				"redirect:/admin/displayStudents?classId=" + eazyClass.getClassId());
		return modelAndView;
	}

	@RequestMapping("/displayCourses")
	public ModelAndView displayCoursesPage(Model model) {
		List<Courses> courses = coursesRepository.findAll();

		ModelAndView modelAndView = new ModelAndView("courses_secured.html");
		modelAndView.addObject("courses", courses);
		modelAndView.addObject("course", new Courses());
		return modelAndView;
	}

	@PostMapping("/addNewCourse")
	public ModelAndView addCourse(@ModelAttribute("course") Courses courses, Model model) {
		ModelAndView modelAndView = new ModelAndView();
		coursesRepository.save(courses);
		modelAndView.setViewName("redirect:/admin/displayCourses");
		return modelAndView;
	}

	@RequestMapping("/viewStudents")
	public ModelAndView viewStudents(Model model, @RequestParam int id, HttpSession session,
			@RequestParam(value = "error", required = false) String error) {
		ModelAndView modelAndView = new ModelAndView("courses_student.html");
		Courses courses = coursesRepository.findById(id).get();
		modelAndView.addObject("courses", courses);
		modelAndView.addObject("person", new Person());
		session.setAttribute("courses", courses);
		return modelAndView;
	}

	@RequestMapping("/addStudentToCourse")
	public ModelAndView addStudentToCourse(Model model, HttpSession session, @ModelAttribute("person") Person person) {
		String errorMessage = null;
		ModelAndView modelAndView = new ModelAndView();
		Courses courses = (Courses) session.getAttribute("courses");
		Person personEntity = personRepository.findByEmail(person.getEmail());
		if (personEntity == null || !(personEntity.getPersonId() > 0)) {
			modelAndView.setViewName("redirect:/admin/viewStudents?id=" + courses.getCourseId() + "&error=true");
		}
		personEntity.getCourses().add(courses);
		courses.getPersons().add(personEntity);
		personRepository.save(personEntity);
		session.setAttribute("courses", courses);
		modelAndView.setViewName("redirect:/admin/viewStudents?id=" + courses.getCourseId());
		if (error != null) {
			errorMessage = "Invalid Email Address";
			modelAndView.addObject("errorMessage", errorMessage);
		}
		return modelAndView;
	}
}
